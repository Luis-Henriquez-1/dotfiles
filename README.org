#+title: README.org
#+author: Luis Henriquez-Perez
#+tags: doc

* About
:PROPERTIES:
:ID:       0cb3dfbc-4eb6-4918-8100-ab6073af9e0e
:END:

I created this dotfile configuration for so I can reproduce my current system
configuration quickly and easily on other machines. Additionally, I want to make
a point to document my configuration extensively so that others can easily learn
from mine.

Just like in every dotfile system, the main purpose is to reproduce a computer
setup onto a given machine. So if your computer ever crashes or is destroyed, or
even if you just don't have access to your computer you can get a full, working
setup on any computer.

* Why org-mode?
:PROPERTIES:
:ID:       45c846bf-5cbc-4437-af99-d9ec3b42cc2d
:END:

This headline explains why I use [[https://orgmode.org/][org-mode]] as the centerpiece of my configuration.

** divide and conquer
:PROPERTIES:
:ID:       a28eda39-f3e5-4e73-a380-4f44d27d9a07
:END:

One of big goals for my dotfile design is to allow me to "divide and conquer"
problems more easily.

** homogenous throughout dotfiles
:PROPERTIES:
:ID:       b4906e21-20fd-4bb4-9f2f-e6e745d0b41e
:END:

One of the great strengths of using org-mode for all my dotfiles is the
consistency and homogenuity it provides. Typically dotfiles are in several
different languges. And documentation, in turn, is done via comments in several
different syntaxes. Most programming languages don't allow markup in their
comments and don't allow linking to other files or websites. Thus, we're left
with a mess. Instead, with org-mode I can document all my dotfiles the same way.
All of them will have the same general structure, so it is very predictable and
easy to follow.

** documentation based
:PROPERTIES:
:ID:       05a0ce02-8dbf-4e4a-9c45-2ce857fe4a2a
:END:

Org files lend themselves well to documentation. As I mentioned Org is a markup
language. It provides a syntax for links and a syntax for referencing other
files, or for adding inline images.

** powerful searching via tags
:PROPERTIES:
:ID:       7e0a68ef-5f9c-4017-97f2-2ea3454421e3
:END:

I use tags heavily in my dotfiles. One of my desires is to abstract away the
concept of files, operating instead by searching for tags. Tags are powerful.
They allow me to search for things that would be hard or impossible to search
for otherwise[fn:1]. They also don't suffer from the limitations that outlines
inherently have.

** flexible directory structure
:PROPERTIES:
:ID:       ff12f1ee-7c36-4385-9b67-eefbebc4c54d
:END:

Since I can specify where I want my org files tangled, I am not tied to having
my files in a particular file-directory hierarchy. And yet, because I
[[][tangle] the files I can still reap the advantage and simulate having such a
hierarchy to benefit.

** hackable and minimal
:PROPERTIES:
:ID:       bea7b6a6-e24a-41a4-9637-149c5f986685
:END:

Org is an Emacs package that's written en emacs-lisp. I can extend it just like
any other Emacs package.

* Bootstraping
:PROPERTIES:
:ID:       e0d7acfa-0205-4cb2-b4ed-711340af250e
:END:

Both ways I provide of bootstrapping require Emacs installed because Emacs is
what handles tangling.

** with shell
:PROPERTIES:
:ID:       af7091c8-2af8-4ac8-b8e2-f796ca179f0a
:END:

#+begin_src emacs-lisp
sh bootstrap.sh
#+end_src

** with emacs
:PROPERTIES:
:ID:       09da6062-f2d1-45b4-8eeb-985e428f26a7
:END:

To bootstrap my configuration you can run my [[bootstrap.sh][bootstraph.sh
script] via ~~. Alternatively, you can. Right now my dotfiles are in a very
early stage. You'll need Emacs installed--at least until.

#+begin_src emacs-lisp
emacs --script bootstrap.sh
#+end_src

* Design Choices
:PROPERTIES:
:ID:       9f67931c-d9c6-4f6d-8a07-eab363d3d6bf
:END:

** org-mode
:PROPERTIES:
:ID:       976c09e0-1c90-4a4b-8779-ce79f2c69794
:END:
:LINKS:
https://irreal.org/blog/?p=2559
http://sleepomeno.github.io/blog/2014/02/16/This-is-not-an-org-mode-Tutorial/
:END:

I write my dotfiles in org-mode and tangle them to their corronding places with [[][org-mode].
Org mode allows me to express my dotfiles in a homogenous syntax.

Org allows me to have expressive documentation.

** tag-based
:PROPERTIES:
:ID:       9c7e9022-4dec-4299-a487-ea16000fb5ec
:END:

** prefer level-1 directory structure
:PROPERTIES:
:ID:       90e53ab7-9073-49c7-9105-3d949753abfb
:END:

I have never liked complex directory structures (or even complex file structures
for that matter). It make is more diffult for me to traverse and more error
prone because I need to remember what is in which directory. I also don't want
others looking at my dotfiles to have to guess where stuff is. That's why I'd
like to keep the directory hierarchy as minimal and simple as possible.

As I mentioned, I'd ideally prefer a tag-based structure and, indeed, I have
used tags throughout my org files so that my dotfiles can be used in this way.
But I cannot ignore the fact that.

* How it Works
:PROPERTIES:
:ID:       00e2ab6a-254a-4bf7-b44b-44555243d1cd
:END:

** Bootstrap
:PROPERTIES:
:ID:       a73952cd-104f-4ccf-9e20-2252ef13442d
:END:

To bootstrap my config run the [[][bootstrap.sh] script. It's a script that
will. Note that this script assumes Emacs is already installed.

#+begin_src shell
sh bootstraph.sh
#+end_src

** Setting Up Dotfiles
:PROPERTIES:
:ID:       5bb7ca90-711d-44ea-9272-cd8736ee9a2a
:END:

My dotfiles are written as org-mode files. Each When I make a change to an org-mode
file and want its target. Whenever I change a configuration file, I need to
[[][tangle] it so that the changes are written to the file itself.

#+begin_src emacs-lisp
#+end_src

* web page screenshots :webshot:
:PROPERTIES:
:ID:       8d3fabcd-0180-46f7-93f2-911c3b3a80f8
:END:
:LINKS:
https://github.com/Y2Z/monolith
:END:

Saving links is good, but it is not enough. Websites can be (and are often)
modified. They can be taken down in which case any links would them would either
break or point to someplace else. A true data hoarder saves webpages they deem
useful on their computer.

** monolith :webshot:
:PROPERTIES:
:ID:       9ecae28c-1741-4aad-9c5b-646045e714d3
:END:

[[https://github.com/Y2Z/monolith][monolith]] is a program meant to

#+begin_src shell
monolith https://github.com/Y2Z/monolith -o ~/.tangld/src/multimedia/webshots/monolith-github-page.html
#+end_src

* Screenshots
:PROPERTIES:
:ID:       878de7ed-1230-4466-8f37-ba55dcaeac19
:END:

* Footnotes

[fn:1] For example, suppose I wanted to find all Emacs code I wrote dealing with
performance. I could try to look for general terms such as
[[][gc-cons-threshold] or idle or defer, but it's quite probably that I wrote
some code block for some optimization that has none of these general terms. One
such example is [[][this one].
