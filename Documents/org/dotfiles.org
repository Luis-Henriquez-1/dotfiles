* about
:PROPERTIES:
:ID:       bf96dec4-c43a-45c9-b5e5-65a68a892355
:END:

This file generates my other dotfiles.

* noweb info
:PROPERTIES:
:ID:       676814ba-1935-482a-ad6a-7f251c598d2e
:END:

* bashrc
:PROPERTIES:
:ID:       57c4a0d2-bafa-40ce-ae6a-68074db1a618
:END:

#+begin_src bash :tangle ~/.bashrc
[[$- != *i* ]] && return

# recommended by gpg manual
GPG_TTY=$(tty)
export GPG_TTY
#+end_src

* xinitrc
:PROPERTIES:
:ID:       e3ae25ce-76bd-4d31-b8d4-c7b430460860
:END:

#+begin_src sh :tangle ~/.xinitrc
#!/bin/sh

if [ -d /etc/X11/xinit/xinitrc.d ] ; then
	for f in /etc/X11/xinit/xinitrc.d/?*.sh ; do
		[ -x "$f" ] && . "$f"
	done
	unset f
fi

[ -f ~/.xprofile ] && . ~/.xprofile

if [ $# -eq 0 ]; then
    setxkbmap -option caps:escape
	emacs --daemon
	exec emacsclient -c
fi

exec "$@"
#+end_src

* git
:PROPERTIES:
:ID:       520ce874-e7af-4ae7-8ac8-b2a91490aa99
:END:

#+begin_src conf :tangle no
[user]
	email = <<email-main-address()>>
	name = <<my-name()>>
#+end_src

* dunst
:PROPERTIES:
:ID:       65be56f1-48e8-40c1-9542-0732977ebe12
:END:

* gpg-conf
:PROPERTIES:
:ID:       25bb9597-94d0-44af-8da0-86b9505d1491
:END:

I took this from ambrevar.

#+begin_src conf :tangle ~/.gnupg/gpg-agent.conf
## 1-day timeout
default-cache-ttl 86400
max-cache-ttl 86400

enable-ssh-support
default-cache-ttl-ssh 86400
max-cache-ttl-ssh 86400

# pinentry-program /usr/bin/pinentry-emacs
allow-loopback-pinentry
# allow-emacs-pinentry
#+end_src

* email

:PROPERTIES:
:ID:       121f6bc5-23ed-465f-90c5-9d11db715ff6
:END:
** helpers
:PROPERTIES:
:ID:       04332f62-7554-477d-a6a3-d6f5a93317aa
:END:

*** convert
:PROPERTIES:
:ID:       67ecf9f7-8c43-4538-b581-d3a363ff8eec
:END:

The goal here is to write as much of the dotfile configuration in elisp as
possible. And also to generate repetative code.

#+begin_src emacs-lisp :tangle no
(defun conf:convert-to-string (&rest plist)
  "Return a"
  (s-join "\n"
          (mapcar (-lambda ((keyword value))
                    (format (concat "%s" (when value " %s")) (void:keyword-name keyword) value))
                  (-partition-before-pred #'keywordp plist))))
#+end_src

*** conf string
:PROPERTIES:
:ID:       f4933510-0f19-4ce0-82cf-d215b670e188
:END:

#+begin_src emacs-lisp
(defun conf:string (input &rest args)
  (format "%S" (apply #'format input args)))
#+end_src

** msmtprc
:PROPERTIES:
:ID:       1747ff3c-0fa4-4cb9-9b80-324bc0877dfb
:END:

*** msmtprc
:PROPERTIES:
:ID:       7f888dc8-1c41-478c-accd-6a038a96ec3c
:END:

#+begin_src emacs-lisp :tangle no
(defun dotfiles:msmtprc-account-string (mail)
  "Return account string for msmtprc."
  (let* (($account (password-store-get-field mail "account"))
         ($out-host (password-store-get-field mail "out-host"))
         ($out-port (password-store-get-field mail "out-port"))
         ($email (password-store-get-field mail "email")))
    (conf:convert-to-string
     :account $account
     :host $out-host
     :from $email
     :port $out-port
     :user $email
     :passwordeval (conf:string "pass email/%s" $account))))
#+end_src

*** account-info
:PROPERTIES:
:ID:       82d845cb-685b-4f64-a194-99e840561c98
:END:

#+name: msmtprc-account-info
#+begin_src emacs-lisp
(->> (directory-files (expand-file-name "~/.password-store/email"))
     (cddr)
     (-map #'dotfiles:msmtprc-account-string)
     (s-join "\n"))
#+end_src

*** main
:PROPERTIES:
:ID:       537fb697-f84c-46d7-80ac-0745ec3bddb1
:END:

#+begin_src conf :noweb tangle :tangle ~/.msmtprc
defaults
auth on
tls on
tls_trust_file /etc/ssl/certs/ca-certificates.crt
logfile ~/.msmtp.log

<<msmtprc-account-info()>>

account-default main
#+end_src

** mbsync
:PROPERTIES:
:ID:       3d5d4928-f61b-4492-afd9-2f90c9d737c4
:END:

=mbsync= is what I use to sync my email from a server.

*** mbsync account setup
:PROPERTIES:
:ID:       1e503ace-8af6-46a1-9ec0-62cef1372adf
:END:

#+begin_src emacs-lisp :tangle no
(defun dotfiles:mbsyncrc-imap-account-setup (mail)
  "Return the account part of the."
  (let (($account (password-store-get-field mail "account"))
        ($in-host (password-store-get-field mail "out-host"))
        ($in-port (password-store-get-field mail "out-port"))
        ($email (password-store-get-field mail "email")))
    (conf:convert-to-string
     :IMAPAccount $account
     :Host $in-host
     :User $email
     :PassCmd (conf:string "pass email/%s" $email)
     :SSLType 'IMAPS
     :CertificateFile '/etc/ssl/certs/ca-certificates.crt
     :Port $in-port)))
#+end_src

*** account store
:PROPERTIES:
:ID:       946e1645-c0e9-4f31-97bc-a54a4936d7b3
:END:

#+begin_src emacs-lisp :tangle no
(defun dotfiles:mbsyncrc-imap-store-setup (mail)
  "Return the remote part of mbsync."
  (let* (($account (password-store-get-field mail "account"))
         ($email (password-store-get-field mail "email")))
    (conf:convert-to-string
     :IMAPStore (format "%s-remote" $account)
     :Account $account
     :MaildirStore (format "%s-local" $account)
     :Subfolders 'Verbatim
     :Path (format "~/mail/%s" $email)
     :Inbox (format "~/mail/%s/inbox" $email))))
#+end_src

*** sync all
:PROPERTIES:
:ID:       55d49037-2d10-4890-a0ff-e1ff2b512373
:END:

#+begin_src emacs-lisp :tangle no
(defun dotfiles:mbsyncrc-sync-all (mail)
  "Return the sync all string of the mbsync."
  (let* (($account (password-store-get-field mail "account")))
    (conf:convert-to-string
     :Channel $account
     :Master (format $account ":-remote:")
     :Slave (format $account ":-local:")
     :Patterns '*
     :Create\ Both
     :SyncState '*)))
#+end_src

*** sync gmail
:PROPERTIES:
:ID:       39b9d98f-223e-46f4-a136-a79292d96617
:END:

#+begin_src emacs-lisp
(defun dotfiles:sync-gmail ()
  )
#+end_src

*** mbsync
:PROPERTIES:
:ID:       20962e17-ddae-465f-9123-ae8918539c6a
:END:

#+begin_src emacs-lisp
(defun dotfiles:mbsyncrc-config (pass-dir)
  "Return the string"
  (let ((gmail-p (s-contains-p "gmail.com" pass-dir)))
    (list (dotfiles:mbsyncrc-imap-account-setup pass-dir)
          (dotfiles:mbsyncrc-imap-store-setup pass-dir)
          (if (not gmail-p)
              (dotfiles:mbsyncrc-sync-all pass-dir)
            (dotfiles:mbsyncrc-)))))
#+end_src

*** producting code
:PROPERTIES:
:ID:       0cc68149-cf83-429e-a54b-1416565cd6ed
:END:

#+begin_src emacs-lisp
(->> (directory-files (expand-file-name "~/.password-store/email"))
     (cddr)
     (--map #'dotfiles:msmtp-account-string)
     (s-join "\n"))
#+end_src

*** all
:PROPERTIES:
:ID:       3f5d8401-2090-45d8-928d-c8aa7eee32a7
:END:

#+begin_src conf :noweb tangle :tangle ~/.mbsyncrc
<<mbsync-setup>>
#+end_src
