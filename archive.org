#+title: archive.org
#+author: Luis Henriquez-Perez

I try to avoid deleting headlines. There's no reason to delete them if they
might prove useful later. This file will contain the headlines that for
some reason I'm not using.

You may wonder that if I'm using version control why have this file. Why not get
the headlines back searching my vcs history. Well, version control does not
"know" about org headlines. And I don't know of a way to search through it
painlessly.

* depth
:PROPERTIES:
:ID:       3407c7fc-9866-4014-8b19-7cbd306201a0
:END:

By default the clone depth [[][] is =full=, meaning that all of the history of a
repository is cloned. Particularly for packages that have been around a long
time, this can consume a lot of memory.

** iteratively compute depth
:PROPERTIES:
:ID:       1a71f0e2-fa7d-4acc-bf4f-9340d4ee2f5e
:END:

I want a way to only clone a repository as much as I need to to get to the
commit I have in my recipe file. To do this I'd need to get the depth of a
specific commit.

https://stackoverflow.com/questions/39935546/get-git-sha-depth-on-a-remote-branch

#+begin_src emacs-lisp
(defun xl-straight-set-depth (recipe)
  "Set recipe's depth to minimum needed for its commit."
  (iter (with ((&plist :type :local-repo) (cdr recipe))
	      (recipe-commit (plist-get (cdr recipe) :commit))
	      (repo-dir (straight--repos-dir local-repo))
	      (depth (string-to-number (shell-command-to-string (format "cd %s && git log --oneline | wc -l" repo-dir)))))
	(until (straight-vc-commit-present-p (cdr recipe) recipe-commit))
	(expr depth (1+ depth))
	(message "Increasing depth of %s from %s to %s..." (car recipe) (1- depth) depth)
	(shell-command (format "cd %s && git pull --depth %d" repo-dir depth))))
#+end_src

** repos that are not deep enough
:PROPERTIES:
:ID:       8d8d817a-17e4-4c83-a12f-3a54c46e9dfd
:END:

#+begin_src emacs-lisp
(defun xl-straight-repos-lacking-depth (recipes)
  "Return the recipes for packages who need greater depth."
  (loopy (list (recipe &as package . plist) recipes)
	 (expr (&plist :type :local-repo) plist)
	 (expr recipe-commit (plist-get plist :commit))
	 (unless (straight-vc-commit-present-p plist recipe-commit)
	   (collect recipe))))
#+end_src

** repos whose version conflicts with recipe
:PROPERTIES:
:ID:       dce02b0c-5d3d-4f2a-b530-8dfd1c45eadb
:END:

The easiest scenario for getting repos back.

#+begin_src emacs-lisp
(defun xl-straight-recipes-whose-version-conflicts (recipes)
  "Return a list of recipes for repos that aren't the correct commit."
  (loopy (list recipe recipes)
	 (expr package (car recipe))
	 (expr (&plist :type :local-repo :commit) (cdr recipe))
	 (unless (and type local-repo commit) (skip))
	 (expr current-commit (straight-vc-get-commit type local-repo))
	 (unless (string= current-commit commit)
	   (collect recipe))))
#+end_src

* recipes that have a depth of 1
:PROPERTIES:
:ID:       4e53b0cb-f730-4fad-a92a-4f7877bf12b4
:END:

#+begin_src emacs-lisp
(loopy (with (recipes (xl-read-recipes XL-RECIPE-FILE))
	     (depth straight-vc-git-default-clone-depth))
       (initially (unless (numberp depth) (error)))
       (list recipe recipes)
       (expr package (car recipe))
       (expr local-repo (plist-get (cdr recipe) :local-repo))
       (when local-repo
	 (expr dir (straight--repos-dir local-repo))
	 (expr command (format "cd %s && git log --oneline | wc -l" dir))
	 (expr depth (string-to-number (shell-command-to-string command)))
	 (when (= 1 depth) (collect package))))
#+end_src

* defmacro!
:PROPERTIES:
:ID:       5e7f7096-482f-45fd-8bc9-8e1c5c378b35
:END:

The purpose of this headline is to write a macro that'll make some common macro
writting tendencies easier. Specifically, there are two common things done in
macros that I want to facilitate. One is the creation of names. The other is the
declaration of unique symbols.

** special macro symbol regexp
:PROPERTIES:
:ID:       a6d59c97-cd46-4f06-8c18-9b129b74b011
:END:

#+begin_src emacs-lisp
(defun xl-special-macro-symbol-regexp (&optional lax)
  "Return regexp used for special symbols."
  (alet '(bos "<" (group (1+ (not (any white "<" ">")))) ">" eos)
    (rx-to-string (cons 'seq (if lax (-slice it 1 -1) it)))))
#+end_src

** symbol-name
:PROPERTIES:
:ID:       4ce092a6-442e-487e-a031-2349ffdd352e
:END:

#+begin_src emacs-lisp
(defun xl-special-macro-symbol-name (special-symbol)
  (intern (nth 1 (s-match (xl-special-macro-symbol-regexp) (symbol-name special-symbol)))))
#+end_src

** special macro symbols
:PROPERTIES:
:ID:       67e4ef77-587e-404b-9524-ee2881267b77
:END:

#+begin_src emacs-lisp
(defun xl-special-macro-symbols (form)
  "Return the special macro symbols in FORM."
  (->> form
    (-flatten)
    (-select #'xl-special-macro-symbol-p)
    (-uniq)))
#+end_src

** special macro symbol
:PROPERTIES:
:ID:       9f20c6a1-c18d-4585-ae55-b2febadb1095
:END:

#+begin_src emacs-lisp
(defun xl-special-macro-symbol-p (obj)
  "Return non-nil if OBJ is a special macro symbol."
  (and (symbolp obj)
       (s-matches-p (xl-special-macro-symbol-regexp) (symbol-name obj))))
#+end_src

** format string
:PROPERTIES:
:ID:       1e70276c-ae37-41bd-9706-81baa5af3673
:END:

#+begin_src emacs-lisp
(defun xl-macro-format-string (string)
  "Return format form for string."
  (loopy (with (regexp (xl-special-macro-symbol-regexp t))
	       (matches (s-match-strings-all regexp string)))
	 (initially (unless matches (cl-return string)))
	 (list (match name) matches)
	 (collect replacements (cons match "%s"))
	 (collect format-args (intern name))
	 (after (cl-return `(format ,(s-replace-all replacements string) ,@format-args)))))
#+end_src

** format symbol
:PROPERTIES:
:ID:       8cd69453-02aa-466d-9763-0d749ace208d
:END:

#+begin_src emacs-lisp
(defun xl-macro-format-symbol (symbol)
  "Return format form for symbol."
  (alet (xl-macro-format-string (symbol-name symbol))
    (if (stringp it) symbol `(intern ,it))))
#+end_src

** anaphoric symbols
:PROPERTIES:
:ID:       ba379b42-0d47-4413-aa9d-8b2e1f2f1235
:END:

#+begin_src emacs-lisp
(defun xl-macro-format-form (form)
  "Replace all format symbols."
  (cond ((null form)
	 nil)
	((xl-true-list-p form)
	 (mapcar #'xl-macro-format-form form))
	((and (symbolp form) (not (xl-special-macro-symbol-p form)))
	 (xl-macro-format-symbol form))
	((stringp form)
	 (xl-macro-format-string form))
	(t
	 form)))
#+end_src

** defmacro!
:PROPERTIES:
:ID:       9b476d3f-b7a3-4657-9059-ed59b414337f
:END:

When you start writing many macros you many notice that you often need to create
names for functions and variables. Typically, you create these symbols via
something like ~(intern (format "some-name-%s"))~. But doing this all time time
and often multiple times in one macro quickly becomes tedious. This macro is
designed to deal with this problem.

This macro introduces two different anaphoric macro-esque syntaxes. One is that
it replaces symbols of the form =<symbol>=.

https://letoverlambda.com/textmode.cl/guest/chap3.html#sec_6

Note that I intentionally create new names for the anaphoric symbols. The reason
is that they will be inadvertantly picked up by another =macro!= in an upper
level.

#+begin_src emacs-lisp
(defmacro defmacro! (name args &rest body)
  "Define a macro.
If an isolated special symbol."
  (declare (indent defun))
  `(defmacro ,name ,args
     ,(loopy (with (symbols (xl-special-macro-symbols body))
		   (body (macroexp-progn (xl-macro-format-form body))))
	     (list symbol symbols)
	     (expr new-name (xl-symbol-intern (xl-special-macro-symbol-name symbol) "-"))
	     (collect names (list symbol new-name))
	     (finally-return `(mmt-with-unique-names ,names ,body)))))
#+end_src

* set-default!
:PROPERTIES:
:ID:       bc6b7560-fb71-4fc7-a53b-98f92c657d92
:END:

=set-default= is used for.

#+begin_src emacs-lisp
(defmacro set-default! (sym val)
  `(funcall (or (get ',sym 'custom-set-default) 'set-default) ',sym ,val))
#+end_src

* set!

One "gotcha" in Emacs is the existence of custom variables. Unlike typical
variables custom variables sometimes rely on certain code being executed when
they're initialized or when their values are changed. If you just set the
variable normally with [[helpfn:setq][setq]] you'd change it's value but you wouldn't be running
it's corresponding code so the change you think would happen, might not happen
at all.

Rather than keeping track of which variables have custom setters and which do
not, I opt to just use this macro.

For this reason I use =set!= as a replacement for =setq=.

[[https://opensource.com/article/20/3/variables-emacs][This article]] provides a brilliant synopsis of emacs variables.

Note that I may depreciate this in favor of setf.

#+begin_src emacs-lisp
(defmacro set! (&rest args)
  "Set"
  (pcase (length args)
    ((and (pred cl-evenp) (pred > 0))
     `(progn
	,@(loopy (cons (sym val . _) args #'cddr)
		 (expr setter `(or (get ',sym 'custom-set) 'set))
		 (collect `(funcall ,setter ',sym ,val)))))
    (_
     (error "Invalid arguments."))))
#+end_src

* temporarily disable modes
:PROPERTIES:
:ID:       f18bf0e3-8704-443e-95ea-6c9d135f6b0c
:END:

#+begin_src emacs-lisp
(defmacro with-disabled-modes! (modes &rest body)
  "Temporarily disable modes and then restore them after body is evaluated."
  (declare (indent defun))
  (mmt-with-gensyms (to-re-enable mode)
    `(loopy (list ,mode ',modes)
	    (when (bound-and-true-p ,mode)
	      (collect ,to-re-enable ,mode))
	    (finally-do (--map (funcall it -1) ,to-re-enable)
			(progn ,@body)
			(--map (funcall it +1) ,to-re-enable)))))
#+end_src

* set up Emacs service
:PROPERTIES:
:ID:       74734a2d-a089-49da-b857-425d2d52d582
:HEADER-ARGS: :tangle no
:END:

This showcases how to do things with a service.

#+begin_src sh
systemctl --user status emacs.service  # Service status
systemctl --user enable emacs.service  # Start service on boot
systemctl --user start emacs.service   # Start service
systemctl --user stop emacs.service    # Stop service
journalctl --user -u emacs.service     # Service stdout
#+end_src

* with-map!
:PROPERTIES:
:ID:       02bc8acb-5be4-4772-96bc-79cd3392818f
:END:

#+begin_src emacs-lisp
(defmacro with-map! (map &rest body)
  "Let-bind dotted symbols to their values in BODY.
This is similar to `let-alist' but map can be any key value structure."
  (declare (indent 1))
  (loopy (with (dot-regexp (rx bos "." (group (1+ (not white))) eos)))
	 (for sym (-select #'symbolp (-flatten body)))
	 (expr sym-name (symbol-name sym))
	 (expr (_ group1) (s-match dot-regexp sym-name))
	 (unless group1 (skip))
	 (expr name (intern group1))
	 (unioning bindings (list (list (macroexp-quote name) sym)))
	 (finally-return `(map-let ,bindings ,map ,@body))))
#+end_src

* add syntax highlighting for special symbols
:PROPERTIES:
:ID:       500c7883-fcf6-4b6f-97ac-e89388748bcd
:END:

Symbols I've made that start with an exclamation point (=!=), will be used for
special purposes. Specifically a symbol such as =!hello= will signal the
creation of a =once-only!= variable binding. However, if such a symbol is within
a string or part of a larger symbol, then it will single the replacement of a
format string.

I wasn't completely sure as to what the syntax of this variable should be.

#+begin_src emacs-lisp
(defhook add-syntax-highlighting-for-anaphoric-symbol (emacs-lisp-mode-hook)
  ""
  (alet))
#+end_src

* defun font-lock functions
:PROPERTIES:
:ID:       1a416d99-e611-4013-b1a9-cb8949eb6c1b
:HEADER-ARGS: :tangle no
:END:

#+begin_src emacs-lisp
(defvar xl-font-lock-functions nil
  "List of macros that should be font-locked like `defun'.")

(defhook! add-font-lock-for-<name> (emacs-lisp-mode-hook)
  (iterate (list function xl-font-lock-functions)
	   (expr defun-keywords (xl-generate-defun-font-lock function))
	   (collect (font-lock-add-keywords nil )))
  (font-lock-add-keywords nil )
  (->> `(seq "(" (group ,name) (1+ space) (group (1+ (any "-" word))) (1+ space)
	     "(" (group (* (any "-" word))))
    `((,(rx-to-string it)
       (1 font-lock-keyword-face)
       (2 font-lock-function-name-face)
       (3 font-lock-variable-name-face))))
  )
#+end_src

* font lock
:PROPERTIES:
:ID:       0353d5ad-d937-4e7d-8f33-30624b1905de
:END:

The font lock patters that I use are fairly regular. Many macros I define have a
"defun-like" syntax. Therefore, I create a helper that will allow me to generate
the form list I need to register keywords for syntax highlighting.

#+begin_src emacs-lisp
(defun xl-generate-defun-font-lock (name)
  "Return the form to add to font lock for macro with NAME."
  (alet `(seq "(" (group ,(xl-to-string name)) (1+ space) (group (1+ (any "-" word))) (1+ space)
	      "(" (group (* (any "-" word))))
    `((,(rx-to-string it)
       (1 font-lock-keyword-face)
       (2 font-lock-function-name-face)
       (3 font-lock-variable-name-face)))))
#+end_src

* wrap!
:PROPERTIES:
:ID:       e8cd649a-0011-42ce-86d7-cbd342782309
:END:

#+begin_src emacs-lisp
(defmacro wrap! (wrappers &rest body)
  "Wrap WRAPPERS around BODY."
  (declare (indent 1))
  (loopy (list wrapper (reverse wrappers))
	 (reduce wrapper #'xl-snoc :init (macroexp-progn body))))
#+end_src

* fn!
:PROPERTIES:
:ID:       0ebd39d6-0f09-4a66-a6fc-5c259cab150d
:END:

This is a macro for writing anaphoric lambdas. It is based on [[https://github.com/troyp/fn.el][fn]], the main
difference being that in a few special cases you can specify a named anaphoric
variable. Also, I don't support the alternate =fn:= syntax.

#+begin_src emacs-lisp
(defmacro fn! (&rest body)
  "Expand into an anaphoric macro with body BODY."
  (let* ((argsym (make-symbol "ARGS"))
	 (symbolic-placeholders (-uniq (xl-anaphoric-symbols body)))
	 (number-fn (lambda (it) (s-matches-p "<[[:digit:]]>" (symbol-name it))))
	 (numbers-p (-all-p number-fn symbolic-placeholders)))
    (alet (if numbers-p
	      (-sort (lambda (it other) (string-lessp (symbol-name it) (symbol-name other)))
		     symbolic-placeholders)
	    symbolic-placeholders)
      `(lambda (&rest ,argsym)
	 (-let [,it ,argsym] ,@body)))))
#+end_src

* email accounts :email:
:PROPERTIES:
:ID:       3a3c6778-dc5d-45cf-87d1-1c6aacbbae46
:END:

Whatever emails I may use, I'll be adding their password in my password store so
why not use this as a way to get email information?

#+begin_src emacs-lisp
(defun password-store%email-accounts ()
  "Return a list of email accounts."
  (->> (expand-file-name "email/" (password-store-dir))
       (directory-files)
       (cddr)
       (mapcar (fn! (s-chop-suffix ".gpg" <>)))))
#+end_src

* wrapping forms
:PROPERTIES:
:ID:       48e48c0f-7bb3-45c9-b4af-2da0ce84b64e
:END:

When writing macros in lisp it is not uncommon to need to write a macro that can
nest a form within some number of other forms (for an example, see [[id][after!]]). This
macro makes this problem much easier.

The original idea for this macro came from [[https://gitlab.common-lisp.net/iterate/iterate/-/blob/master/iterate.lisp][iter's source code]].

#+begin_src emacs-lisp
(defun xl-wrap-form (wrappers form)
  "Wrap FORM with each wrapper in WRAPPERS.
WRAPPERS are a list of forms to wrap around FORM."
  (declare (pure t) (side-effect-free t))
  (setq wrappers (reverse wrappers))
  (if (consp wrappers)
      (xl-wrap-form (cdr wrappers)
                    (append (car wrappers)
                            (list form)))
    form))
#+end_src

* anaphora :anaphora:
:PROPERTIES:
:ID:       9938b1e1-6c6e-4a45-a85e-1a7f2d0bf6df
:END:

Anaphora refers to the ability to refer to. I have decided it is best to use
=<>= to denote the symbol referred to by anaphoric macros because it is easy to
type (assuming parentheses completion), because such a symbol uncommon in lisp.
A key advantage to this is that there is a consistent "syntax" for anaphoric
variables as opposed to using =it=. A consequence of this is that you have more
flexibility to name variables. Additionally, I like that it looks like a slot or
placeholder.

https://en.wikipedia.org/wiki/Anaphoric_macro

** anaphoric symbol regexp :anaphora:core:library:emacs:config:
:PROPERTIES:
:ID:       40c97bd5-dab1-44df-86f7-90274d5a8ea0
:END:

#+begin_src emacs-lisp
(defconst XL-ANAPHORIC-SYMBOL-REGEXP
  (eval-when-compile (rx "<" (group (zero-or-more (not (any white ">" "<")))) ">"))
  "Regular expression that matches an anaphoric symbol.")
#+end_src

** anaphoric symbol :anaphora:core:library:
:PROPERTIES:
:ID:       db8169ba-1630-42fe-9ab7-e29c110a18c3
:END:

#+begin_src emacs-lisp
(defun xl-anaphoric-symbol-p (obj)
  "Return non-nil if OBJ is an anaphoric symbol."
  (and (symbolp obj)
       (string-match-p XL-ANAPHORIC-SYMBOL-REGEXP (symbol-name obj))))
#+end_src

** true anaphora name :anaphora:
:PROPERTIES:
:ID:       2833cd75-9c85-4c0e-9523-4489d387150a
:END:

#+begin_src emacs-lisp
(defun xl-anaphoric-true-symbol (symbol)
  "Return the symbol that corresponds to the anaphoric symbol."
  (save-match-data
    (string-match XL-ANAPHORIC-SYMBOL-REGEXP (symbol-name symbol))
    (intern (match-string 1 (symbol-name symbol)))))
#+end_src

** take symbol and return anaphoric symbol :anaphora:
:PROPERTIES:
:ID:       4b89588e-f3c3-49d3-8851-fdd214cee563
:END:

#+begin_src emacs-lisp
(defun xl-anaphoric-symbol (symbol)
  "Return anaphoric form of symbol."
  (xl-symbol-intern '< symbol '>))
#+end_src

** body symbols :anaphora:
:PROPERTIES:
:ID:       2bae458e-404a-48e7-b57e-ce7f543f6e6d
:END:

#+begin_src emacs-lisp
(defun xl-anaphoric-symbols (body)
  "Return all the anaphoric symbols in body."
  (->> (-flatten body)
       (-filter #'xl-anaphoric-symbol-p)
       (-uniq)))
#+end_src

** all anaphoric symbols in obj :anaphora:
:PROPERTIES:
:ID:       e0c0eb8c-52b3-4411-ab0b-06255490dacf
:END:

#+begin_src emacs-lisp
(defun xl-anaphoric-symbols-in-obj (obj)
  "Return a list of anaphoric symbols in OBJ."
  (s-match-strings-all XL-ANAPHORIC-SYMBOL-REGEXP (xl-to-string obj)))
#+end_src

