* compute the font upon tangling
:PROPERTIES:
:ID:       62b28647-262f-4657-a57e-79e8a98c2a11
:END:

There's a chicken and egg problem with fonts. What you'd like to do to have a
robust emacs config is have a list of backup fonts that you check in order of
preference until you find the one that is available on your system. Moreover, to
be efficient, you'd like to do this check before the frame is initialized.
Problem is the functions emacs provide to check system fonts depend on the
initialization of the emacs frame.

Note I have not yet tested this. I'm not sure if the frame is created when I run
Emacs from a script. :confused: I'm sure there's some way to do it.

#+name: font
#+begin_src emacs-lisp :tangle no
(defvar xl-backup-fonts (list "jetbrains mono" "hermit" "mononoki" "iosevka" "anonymous-pro")
  "List of fonts that should be used.")

;; Return the preferred font.
(loopy (list font xl-backup-fonts)
       (expr available (x-list-fonts font))
       (when available
	 (expr font (font-spec :name (-last-item available)))
	 (do (font-put font :size 19))
	 (return (format "%S" (font-xlfd-name font))))
       (finally-return nil))
#+end_src

* pause garbage collection
:PROPERTIES:
:ID:       33c4ed1f-9382-49ff-9706-6ce5c0fd0d7c
:END:

During computationally intensive tasks, it is better stop garbage collecting
until the task is done. Initializing emacs is such a task. Therefore, I
effectively stop garbage collection by setting the [[helpvar:gc-cons-threshold][gc-cons-threshold]] to
[[helpvar:most-positive-fixnum][most-positive-fixnum]].

#+begin_src emacs-lisp
(setq gc-cons-threshold most-positive-fixnum)
#+end_src

* disable tool bar, menu bar, and scroll bar
:PROPERTIES:
:ID:       f439de9a-b2b1-4926-a4ae-3d94ff83d05a
:END:

By default the frame is initialized with the tool-bar, menu-bar, and
scroll-bar. Many emacs users, me included, prefer not to see these things. Since
I operate via keybindings I would never use them anyway. But because emacs loads
the init file after the initialization of the frame, it used to be the case that
it was inevitable to catch a glipse of these UI elements during your Emacs
initializaition. Not is it distracting, but rendering those things also
contributed significantly to startup time.

Before the advent of the [[helpvar:early-init-file][early-init-file]], the only way to prevent it was to set
up an [[https://wiki.archlinux.org/index.php/X_resources][xresources]].

#+begin_src emacs-lisp
(push '(menu-bar-lines . 0) default-frame-alist)
(push '(tool-bar-lines . 0) default-frame-alist)
(push '(vertical-scroll-bars) default-frame-alist)
#+end_src

* set the font
:PROPERTIES:
:ID:       54d9be27-74b3-49fd-9bdb-b6d1e024b80b
:END:

This is the most efficient way to set the font. Reason being, it's done before
the initialization of the frame and it avoids the usage of functions like
[[helpfn:set-frame-font][set-frame-font]], which more than just set the font. A caveat is that this will
cause your emacs to crash if the font you specify does not exist. And, you can't
check the existing fonts at this time either because the [[https://emacs.stackexchange.com/questions/62318/storing-string-in-variable-fails-to-work-in-early-init-el/62320?noredirect=1#comment98194_62320][frame hasn't been
initialized yet]] so functions like [[helpfn:font-family-list][font-family-list]] and [[helpfn:find-font][find-font]] will not return
reliable values (trust me, I tried).

#+begin_src emacs-lisp :noweb yes
(push (cons 'font <<font()>>) default-frame-alist)
#+end_src

* disable fringes
:PROPERTIES:
:ID:       bb1264f6-1580-4463-9d72-d2913771ebb4
:END:

#+begin_src emacs-lisp
(push '(left-fringe  . 0) default-frame-alist)
(push '(right-fringe . 0) default-frame-alist)
#+end_src

* stop package.el from writing in our init file
:PROPERTIES:
:ID:       c5df3859-6099-4d99-9780-8d33383c3626
:END:

In Emacs 27+, package initialization occurs before [[helpvar:user-init-file][user-init-file]] is
loaded, but after [[helpvar:early-init-file][early-init-file]].

#+begin_src emacs-lisp
(setq package-enable-at-startup nil)
(advice-add #'package--ensure-init-file :override #'ignore)
#+end_src

* ignore x-resources
:PROPERTIES:
:ID:       51391771-ed2f-42f7-b904-3f655b86cac0
:END:

Ignore X resources; its settings would be redundant with the other settings in
this file and can conflict with later config (particularly where the cursor
color is concerned). [[id:f439de9a-b2b1-4926-a4ae-3d94ff83d05a][Like I said]], we no longer need xresources anymore.

#+begin_src elisp
(advice-add #'x-apply-session-resources :override #'ignore)
#+end_src

* prevent default mode line from showing
:PROPERTIES:
:ID:       0177fd1a-617d-47c6-bd03-db64439fd4cc
:END:

While the modeline is a huge point of interest among emacs users, I find it
distracting and space-consuming. The modeline is displayed in every buffer,
which means that it does not scale well with vertical splits. It will consume an
additional line for every additional window. And yet, I (and I suspect everyone
else) only ever focus on one window at a time. This is why I opt for disabling
the modeline (I use [[https://github.com/kiennq/emacs-mini-modeline][mini-modeline]] instead). Similar to the gui bars it is enabled
by default and will be rendered during the initialization of the frame. If I
don't disable it here.

#+begin_src elisp
(unless after-init-time
  (setq-default mode-line-format nil))
#+end_src

* maximize frame
:PROPERTIES:
:ID:       3d208962-52ad-491a-8bf4-c9248c692fc7
:END:

Emacs is the interface with which I deal with everything else. I want it to be
full screen, especially when I'm using emacs as my window manager. For the same
reasons that setting the font is efficient, this is too.

#+begin_src emacs-lisp
(push '(fullscreen . maximized) default-frame-alist)
#+end_src

