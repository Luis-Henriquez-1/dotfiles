#+title: init.org
#+author: Luis-Henriquez-Perez

* convenience buffer for buffer
:PROPERTIES:
:ID:       3213e0c0-6b4c-4732-83cc-cd3168ecaf01
:END:

#+begin_src emacs-lisp
(defun xl-tangle-files ()
  "Files that should be tangled in the order they should be tangled in."
  (let ((regexp (rx (1+ anything) ".org")))
    (directory-files "~/.tangld/src/emacs/org/" :full regexp :nosort)))
#+end_src

* TODO tangle :tangle:core:xl:
:PROPERTIES:
:ID:       200842df-abca-4885-81fb-102d9f669353
:END:

Ideally, I want to tangle my org files into one =.el= file. Why just one? The
control flow is extremely simple (compared to loading multiple files) and it
saves us calls to =require= or =load= which would be necessary for multiple
files.

** loading of the config
:PROPERTIES:
:ID:       b5356050-946b-42ff-8d3b-65d90ebecf85
:END:

The idea is to generate one file that contains the relevant contents of my
headlines.

#+begin_src emacs-lisp
(defun xl-tangle-build ()
  "Build my init file from my org files."
  (interactive)
  (iter (with (target "~/.config/emacs/init.el")
	      (files (directory-files "~/.tangld/src/emacs/org/" :full))
	      (tangle-regexp (rx (or "elisp" "emacs-lisp"))))
	(each file files)
	(expr alist (org-babel-tangle-collect-blocks tangle-regexp file))
	(append contents (mapconcat (-partial #'nth 5) alist "\n"))
	(finally-do (f-write body 'utf-8 target))))
#+end_src

** order in which files should be loaded
:PROPERTIES:
:ID:       3c904e76-94f5-44b4-9dce-b5401ff9bce2
:END:

The loading order of most files does not matter.

#+begin_src emacs-lisp
(defun xl-tangle-priority (file)
  (pcase file 
    ((app f-filename "pacman.org")  3)
    ((app f-filename "library.org") 2)
    ((app f-filename "keybinding.org") 1)
    (_ 0)))

(defun xl-tangle-sort (&rest files)
  (apply #'> (mapcar #'xl-tangle-priority files)))
#+end_src

** generating elisp file
:PROPERTIES:
:ID:       98245bdc-9055-4ffd-b41e-444be6a4190b
:END:

#+begin_src emacs-lisp
(defun xl/build-init-file ()
  "Build an init file."
  (interactive)
  (iter (with (regexp (rx (1+ anything) ".org"))
	      (files (-sort #'xl-tangle-sort (directory-files "~/.tangld/src/emacs/org/" :full regexp :nosort))))
	(each file files)
	(unless (f-file-p file) (skip))
	(with-temp-buffer
	  (insert-file-contents file)
	  (goto-char (point-min))
	  (while (re-search-forward org-babel-src-block-regexp nil t nil)
	    (expr body (match-string-no-properties 5))
	    (collect code body)))
	(finally-do (f-write (mapconcat #'identity code "\n") 'utf-8 "~/.config/emacs/init.el"))))
#+end_src

* TODO searching headlines :org:search:tag:
:PROPERTIES:
:ID:       6e5adc3a-b856-4155-952c-131685da2532
:END:
:LINKS:
[[helpfn:org-ql-search][org-ql-search]]
:END:

To use a tag-based org mode config, you need to have a system for searching
headlines based on tags.

#+begin_src emacs-lisp
(defun xl/search-org-headline ()
  (interactive)
  )
#+end_src

* search headlines examples :org:search:example:
:PROPERTIES:
:ID:       62cece90-f276-4920-9448-68da6deb74cf
:END:

#+begin_src emacs-lisp
(org-ql-search (-select #'f-file-p (xl-tangle-files)) '(and (src :lang "emacs-lisp") (regexp "use-package org-ql")))
(org-ql-search (-select #'f-file-p (xl-tangle-files)) '(and (src :lang "emacs-lisp") (regexp "with-temp-advice!")))
(org-ql-search (-select #'f-file-p (xl-tangle-files)) '(and (src :lang "emacs-lisp") (tags "alias")))
;; Doesn't work.
;; (org-ql-search (-select #'f-file-p (xl-tangle-files)) '(and (src :lang "emacs-lisp") (src :regexps "use-package org-ql")))
(org-ql-select (-select #'f-file-p (xl-tangle-files)) '(src :regexps ("org-ql")))
#+end_src

* garbage collection :performance:
:PROPERTIES:
:ID:       dda841d2-25f3-4595-ab6a-87cb1bb72dba
:END:

Emacs garbage collects too frequently for most modern machines. This makes emacs
less performant especially when performing a large number of calculations,
because it spends resources garbage collecting when it doesn't have to. Indeed,
increasing the value of [[helpvar:gc-cons-threshold][gc-cons-threshold]], the number of bytes of consing
between garbage collections, is known to make a notable difference in user
startup time. By default it is only 800 KB.

* loading theme :theme:
:PROPERTIES:
:ID:       b4773208-5e96-46d2-90d0-1731f6581f1b
:END:

Sometimes there are things that need tidying up after loading a theme. For
example, if I'm using evil I need to update the cursor color.

#+begin_src emacs-lisp
(defvar xl-after-load-theme-hook nil
  "Hook run after the theme is loaded with `load-theme'.")

(defadvice! run-after-load-theme-hook (:after load-theme)
  "Set up `xl-load-theme-hook' to run after `load-theme' is called."
  (run-hooks 'xl-after-load-theme-hook))
#+end_src

* text scaling
:PROPERTIES:
:ID:       5d242d0e-eeab-46de-bcee-ecfd79b2bffc
:END:

I change the text scale frequently because in some cases, such as viewing my
main org file, I want a birds-eye view where I can see the structure of a
document at a glance. However, when I'm doing something like editing a source
block I want to focus on a very specific thing totally; therefore, I want the
text to take up most of the screen.

