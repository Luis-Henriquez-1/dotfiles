* package management :pacman:core:
:PROPERTIES:
:ID:       00eaa1a5-b5fe-437d-9888-1846ea9a232b
:END:

The goal I have with package management is to deal with it all in this headline.
All package installation should happen here so that later we can use focus on
configuring packages, pretending like all the packages I'm are built-in to Emacs.

** ensure lexical binding :core:performance:emacs:config:
:PROPERTIES:
:ID:       2b8148c3-1418-4896-ba53-1673d2d82659
:END:

Emacs by default uses dynamic binding. Lexical binding is a [[https://nullprogram.com/blog/2016/12/22/][known way to boost
startup speed]]. To enable it you add the following [[info:elisp#Using Lexical Binding][buffer-local variable]] on the
top of your elisp file.

#+begin_src emacs-lisp
;; -*- lexical-binding: t -*-
#+end_src

** config files and directores :core:dir:
:PROPERTIES:
:ID:       be8993d3-c8f7-451b-8cb4-04a9138e5c4e
:END:

It's useful to store directories which I reference frequently in variables and
functions. This way I can reference the full path. Certain directories are
important; and I end up referencing them alot.

#+begin_src emacs-lisp
(defvaralias 'XL-INIT-FILE 'user-init-file)

(defvaralias 'XL-EMACS-DIR 'user-emacs-directory)

(defconst XL-README-FILE (expand-file-name "README.org" "~/")
  "README file from which all other files are tangled.")

(defconst XL-LOCAL-DIR (concat XL-EMACS-DIR ".local/")
  "Directory where I store files that need to exist, but I don't want to see.")

(defconst XL-CACHE-DIR (concat XL-LOCAL-DIR "cache/")
  "Directory where I store files used for caching information.")

(defconst XL-RECIPE-FILE (concat XL-EMACS-DIR "recipes.el")
  "File that stores the recipes for all the packages I install.")

(defconst XL-PACKAGES-DIR (concat XL-LOCAL-DIR "packages/")
  "Directory where packages are stored.")
#+end_src

** debug-p
:PROPERTIES:
:ID:       39197346-c420-4518-b8f8-8ea247d6decb
:END:

[[helpvar:void-debug-p][xl-debug]] is snatched from [[https://github.com/hlissner/doom-emacs][Doom's]] [[https://github.com/hlissner/doom-emacs/blob/develop/core/core.el][doom-debug-mode]]. The point of this variable is
to serve as an indicator of whether the current Emacs instance is run for
debugging. When Emacs is set up for debugging it prints out many messages about
what its doing via [[hfn:void-log][xl-log]].

#+begin_src emacs-lisp
(defvar xl-debug-p (or (getenv "DEBUG") init-file-debug)
  "When non-nil print debug messages.
The --debug-init flag and setting the DEBUG envar will enable this at startup.")
#+end_src

** straight :straight:core:pacman:
:PROPERTIES:
:ID:       2e251cc7-04de-43f8-a31f-1574a54ad576
:END:

[[straight][straight.el]] is a package manager that installs packages by cloning their git
repositories from online and building them from source. A consequence of this is
that you have the history of every installed emacs package locally. Another
consequence is that you can completely reproduce the state of your emacs on
another machine by installing the same packages with the same versions.

*** variables :straight:pacman:core:
:PROPERTIES:
:ID:       9dff9894-667c-4e74-9624-8aee533f8f70
:END:

We don't need to clone everything from the git repos. Setting the depth to one
conserves some disk space.

#+begin_src emacs-lisp
(setq straight-base-dir XL-PACKAGES-DIR)
(setq straight-use-package-version 'straight)
(setq straight-use-package-by-default nil)
(setq straight-check-for-modifications nil)
(setq straight-recipes-emacsmirror-use-mirror t)
(setq straight-vc-git-default-clone-depth 1)
#+end_src

*** handle autoloads for me :straight:pacman:autoload:core:
:PROPERTIES:
:ID:       d3b052e4-fc7e-4b64-bd53-a6aa4b8abd16
:END:

To save startup time, we don't want to load packages unnecessarily. Many
packages have what I like to call (I just made this up :smirk-cat:) "entry-points", or
commands that are used to trigger the loading of the package. =straight=
optionally handles this for us.

#+begin_src emacs-lisp
(setq straight-disable-autoloads nil)
(setq straight-cache-autoloads t)
#+end_src

*** package integration :straight:pacman:core:
:PROPERTIES:
:ID:       db1f9042-5b6c-41a9-a69c-d05d0493fdb0
:END:

By "integration" this variable means that it disables =package.el='s
initialization. We don't need =straight= to do this for us because it is handled in
[[id][early-init]].

#+begin_src emacs-lisp
(setq straight-enable-package-integration nil)
#+end_src

*** load bootstrap file :straight:pacman:core:
:PROPERTIES:
:ID:       544f1bbe-3981-4d1b-8b24-3395b27890b2
:END:

#+begin_src emacs-lisp
(defun xl-load-straight-boostrap-file ()
  "Load straight bootstrap file."
  (defvar bootstrap-version)
  (let ((bootstrap-version 5)
	(bootstrap-file (concat XL-PACKAGES-DIR "straight/repos/straight.el/bootstrap.el")))
    (load bootstrap-file nil 'nomessage)))
#+end_src

*** whether installed :straight:pacman:core:
:PROPERTIES:
:ID:       9216f0b9-93d5-43fe-aa96-3796674ab520
:END:

#+begin_src emacs-lisp
(defun xl-straight-installed-p ()
  "Return non-nil if straight is installed."
  (let ((straight-dir (concat XL-PACKAGES-DIR "straight/")))
    (and (file-exists-p straight-dir)
	 (file-exists-p (concat XL-PACKAGES-DIR "straight/repos/straight.el/bootstrap.el")))))
#+end_src

*** installing straight.el :straight:pacman:core:
:PROPERTIES:
:ID:       ab38beca-2f26-4718-ab73-e4e4409f1563
:END:

I got the inspiration of cloning straight's repo (as opposed to just using the
[[https://github.com/raxod502/straight.el#bootstrapping-straightel][bootstrap code]]) from [[https://github.com/kinnala/diy-emacs][diy-emacs]].

#+begin_src emacs-lisp
(defun xl-install-straight (recipe commit base-dir)
  "Install straight to BASE-DIR."
  (let* ((repo (plist-get (cdr recipe) :repo))
	 (repo-dir (concat base-dir "straight/repos/"))
	 (github-link (format "https://github.com/%s.git" repo)))
    (make-directory repo-dir t)
    (shell-command (format "git -C %s clone %s" repo-dir github-link))
    (shell-command (format "git -C %s checkout %s" repo-dir commit))))
#+end_src

*** read recipes :straight:pacman:core:recipe:
:PROPERTIES:
:ID:       f7a3baa6-d876-40d3-84f5-74b1d9b4f432
:END:

One of the goals is to be able to completely reproduce my Emacs configuration.
To do this I store the recipes of all the package I install in [[helpvar:XL-RECIPE-FILE][XL-RECIPES-FILE]].
Upon startup I read this file and register all the recipes in it with =straight=.

#+begin_src emacs-lisp
(defun xl-read-recipes ()
  "Read and return recipes from `XL-RECIPE-FILE'."
  (with-temp-buffer
    (insert-file-contents-literally XL-RECIPE-FILE)
    (let (forms form)
      (setq form (ignore-errors (read (current-buffer))))
      (while form
	(push form forms)
	(setq form (ignore-errors (read (current-buffer)))))
      (nreverse forms))))
#+end_src

*** generate load-path :straight:pacman:core:
:PROPERTIES:
:ID:       498862a1-8491-4ec1-95ad-f0bafd818ddc
:END:

Perhaps, in the future I could figure out preciesly how straight generates its
load paths and generate them without actually needing to call straight. The
advantage of doing it this way is that it is fool-proof.

#+begin_src emacs-lisp
(defun xl-generate-package-paths ()
  "Return list of package load-paths for RECIPES.
Calls `straight-use-package' on each recipe as a side-effect."
  (pcase-let* ((load-path load-path)
	       (old-load-path load-path)
	       (recipes (xl-read-recipes))
	       (`(,_ ,commit ,recipe) (assoc "straight" recipes)))
    (unless (xl-straight-installed-p)
      (xl-install-straight recipe commit XL-PACKAGES-DIR))
    (xl-load-straight-boostrap-file)
    (pcase-dolist (`(,_ ,_ ,recipe) recipes)
      (straight-use-package recipe))
    (cl-set-difference load-path old-load-path :test #'string=)))
#+end_src

*** set the load-path :straight:pacman:core:
:PROPERTIES:
:ID:       ea592f75-e8dd-4ee7-a44e-c2da9d76191b
:END:

I could just use the side-effect of [[helpfn:straight-use-package][straight-use-package]] to fill up the
[[helpvar:load-path][load-path]]. However, I eventually want to compile this step away in the style of
[[https://github.com/nilcons/emacs-use-package-fast][emacs-use-package-fast]].

#+begin_src emacs-lisp
(require 'cl-lib)
(cl-callf2 append (xl-generate-package-paths) load-path)
#+end_src

*** updating the recipe file :straight:pacman:core:recipe:
:PROPERTIES:
:ID:       cc40b9ac-d061-44f2-84b6-2f5e782e2ed8
:END:

I need a way to update the recipe file based on packages I have installed. Right
now I the file will be updated with the packages I choose to install with
straight. In the future I want more fine grained control, perhaps showing me the
difference between the packages I installed in my current Emacs session compared
with the last and allowing me to choose which ones to add.

*** versions alist :straight:pacman:core:
:PROPERTIES:
:ID:       3db31fa0-86e3-49e3-a13c-c3966bd7d6f7
:END:

#+begin_src emacs-lisp
(defun straight%versions-alist ()
  "Return an alist of (package . version)."
  (let ((versions-alist nil))
    (straight--map-repos
     (lambda (recipe)
       (straight--with-plist recipe
	   (package local-repo type)
	 (when (and local-repo (not (assoc local-repo versions-alist)))
	   (when-let ((commit (straight-vc-get-commit type local-repo)))
	     (push (cons local-repo commit) versions-alist))))))
    versions-alist))
#+end_src

*** update recipe file :straight:pacman:core:
:PROPERTIES:
:ID:       63b9a6eb-bc36-4555-b0d6-0100841277ca
:END:

#+begin_src emacs-lisp
(defun xl/update-recipes ()
  "Update the recipe file with new recipes."
  (interactive)
  (with-temp-file XL-RECIPE-FILE
    (iter (with (gc-cons-threshold XL-GC-CONS-THRESHOLD-MAX)
		(versions-alist (straight%versions-alist))
		(packages (cl-sort (hash-table-keys straight--recipe-cache) #'string-lessp))
		(recipe-cache straight--recipe-cache)
		(print-length nil)
		(print-level nil)
		(print-quoted t))
	  (for package packages)
	  (expr recipe (hash-get package recipe-cache))
	  (expr local-repo (plist-get recipe :local-repo))
	  (when (and local-repo (assoc local-repo versions-alist))
	    (expr revision (alist-get local-repo versions-alist))
	    (expr package (substring-no-properties package))
	    (expr recipe (cons (intern package) recipe))
	    (prin1 (list package revision recipe) (current-buffer))
	    (insert ?\n)))))
#+end_src

** TODO package.el
:PROPERTIES:
:ID:       5ce11231-2f35-4f03-930c-61b0637f75ae
:END:

** install dependencies :core:pacman:
:PROPERTIES:
:ID:       3748094a-e30c-4f59-96ce-3cf1ddec5d42
:END:

#+begin_src emacs-lisp
(require 'use-package)
(require 'dash)
(require 'loopy)
(require 's)
#+end_src

