#+title: asthetic.org
#+author: Luis Henriquez-Perez
#+tags: emacs config asthetic

* highlight-quoted :elisp:lang:prog:
:PROPERTIES:
:ID:       d0973dce-693b-45ca-88e3-27da1bb217f7
:END:

[[https://github.com/Fanael/highlight-quoted][highlight-quoted]] highlights quotes, backticks and.

#+begin_src emacs-lisp
(use-package highlight-quoted
  :hook emacs-lisp-mode-hook)
#+end_src

* transient :interface:
:PROPERTIES:
:ID:       1805bd2d-b190-47b6-9c7c-2a200f9cf6a1
:END:

#+begin_src emacs-lisp
(use-package transient
  :set
  (transient-default-level . 5)
  (transient-levels-file . (concat XL-CACHE-DIR "transient/levels"))
  (transient-values-file . (concat XL-CACHE-DIR "transient/values"))
  (transient-history-file . (concat XL-CACHE-DIR "transient/history")))
#+end_src

* emojify :icon:appearance:
:PROPERTIES:
:ID:       d3e15439-f690-4ced-b701-0882fb911a5c
:END:

This is a package that displays emojis! :D A major focus of my config is having
the ability to express myself well--in ways that is simply impossible with mere
documentation. This includes using emojis. Also, using emojis makes
documentation *much* more fun. :joy-cat:

#+begin_src emacs-lisp
(use-package emojify
  :hook org-mode-hook
  :set
  (emojify-emojis-dir . (concat XL-CACHE-DIR "emojis/")))
#+end_src

* which-key :interface:
:PROPERTIES:
:ID:       2ad092a3-ff63-49cd-91b9-380c91dbe9f5
:END:

Emacs is full of so many keybindings, that it can be difficult to keep track of
them. Especially when you're starting out, but even when you're an Emacs-pro,
it's easy to forget what a particular functionality is bound to. Typically,
you'll remember the first few key strokes but struggle with the rest. To address
this [[github:][which-key]] displays key binding sequences in the minibuffer as your typing
them. By doing this you can "discover" the commands as you go along.

** init
:PROPERTIES:
:ID:       c4aedc23-0be3-46fe-b046-32b5f0738c6b
:END:

#+begin_src emacs-lisp
(use-package which-key
  :hook emacs-startup-hook
  :set
  (which-key-sort-uppercase-first . nil)
  (which-key-max-display-columns  . nil)
  (which-key-add-column-padding   . 1)
  (which-key-min-display-lines    . 6)
  (which-key-side-window-slot     . -10)
  (which-key-sort-order           . #'which-key-prefix-then-key-order)
  (which-key-popup-type           . 'minibuffer)
  (which-key-idle-delay           . 0.8))
#+end_src

** set line spacing :asthetic:
:PROPERTIES:
:ID:       6abb35f4-c648-4bed-b59a-5a0636857fd8
:END:

#+begin_src emacs-lisp
(defhook! set-line-spacing (which-key-init-buffer-hook)
  (setq line-spacing 3))
#+end_src

* font :font:
:PROPERTIES:
:ID:       d600fe06-7a61-43e1-93ea-4e193c69c9f3
:END:

Setting the font correctly and well is crucial for your efficiency while using
emacs. A well choosen font can make things very readable.

Also, sometimes I have font "mania" where I keep toggling different fonts so see
what I feel like using at the moment. Therefore, I need an easy way to toggle.

** font size
:PROPERTIES:
:ID:       3efd0698-a8d3-4fc0-b22b-7f0589de4661
:END:

It's very suprising to me Emacs doesn't provide a function for interactively
setting the font size.

Make sure to appropriately update [[helpvar:default-frame-alist][default-frame-alist]] when changing font size.
Otherwise, you might find (as I did) that switching themes might reset your font
size to its default value.

#+begin_src emacs-lisp
(defun xl-set-font-size (size)
  "Set the font size for the current frame."
  (let ((fs (font-spec :name (frame-parameter nil 'font))))
    (font-put fs :size size)
    (set-frame-font fs nil t)
    (let ((new-font (frame-parameter nil 'font))
          (current-default (assq 'font default-frame-alist)))
      (setf (alist-get 'font default-frame-alist) new-font))))
#+end_src

** font max and min size
:PROPERTIES:
:ID:       309c572a-6aaa-4986-a79d-4774110e6ead
:END:

I have had the experience where I've accidentally set Emacs font so large or so
small that I've had to restart Emacs because even though I know how to undo it,
I could not read anything. Here I declare font size bounds I should never go
outside of.

#+begin_src emacs-lisp
(defconst XL-FONT-MAX-SIZE 30
  "Maximum font size.
The font size that `xl/set-font-size' should never go above.")

(defconst XL-FONT-MIN-SIZE 11
  "Minimum font size.
The font size that `xl/set-font-size' should never go below.")
#+end_src

* hide-mode-line :modeline:asthetic:
:PROPERTIES:
:ID:       e8f53422-9d24-4119-9b0f-9b6d1e10c1b0
:END:

#+begin_src emacs-lisp
(use-package hide-mode-line
  :commands hide-mode-line-mode)
#+end_src

* themes
:PROPERTIES:
:ID:       376581c7-0b45-40c7-a10c-38fde7f9c7a4
:END:

** modus themes :asthetic:theme:
:PROPERTIES:
:ID:       b825b4a0-13e4-483e-b793-c0fcd6223897
:END:

#+begin_src emacs-lisp
(use-package modus-themes
  :set
  (modus-themes-syntax . 'green-strings)
  (modus-themes-slanted-constructs . t)
  (modus-themes-bold-constructs . nil)
  (modus-themes-region . 'no-extend)
  (modus-themes-org-blocks . t)
  (modus-themes-no-mixed-fonts . t))
#+end_src

* dashboard :dashboard:startup:asthetic:
:PROPERTIES:
:ID: 20926522-b78b-4bca-b70e-9ef4213c4344
:END:

[[https://github.com/emacs-dashboard/emacs-dashboard][dashboard]] is an extensible emacs startup screen. I love the idea of =dashboard=:
having an extensible, fast, nice-looking dashboard when starting emacs is
nice. It's not only nice asthetically, it's also strategic too. First, you can
use it as a launching point to get to your tasks quicker. And second, it doesn't
require any expensive modes. I've often been starting out with the scratch
buffer and I've wanted to have the scratch buffer start off with
=emacs-lisp-mode=, but I don't want it to trigger =company=, =yasnippet=, etc. on
startup. If I start my emacs with =dashboard= I can avoid this.

** random logo :dashboard:startup:asthetic:
:PROPERTIES:
:ID:       80e5fa17-d18a-4ec0-af8d-728d77843c69
:END:

=dashboard= provides three text pictures which are referred to by number and two
images which referred to by the symbols =official= and =logo=.

#+begin_src emacs-lisp
(defun dashboard%random-logo ()
  "Display a random logo."
  (seq-random-elt
   (append '(1 2 3) (if (display-graphic-p) '(official logo)))))
#+end_src

** require :dashboard:asthetic:
:PROPERTIES:
:ID:       73d00f99-4b70-44d1-8359-01bd2c94b330
:END:

#+begin_src emacs-lisp
(use-package dashboard
  :demand t
  :hook (window-setup-hook . dashboard-insert-startupify-lists)
  :set
  (dashboard-items . nil)
  (dashboard-startup-banner . (dashboard%random-logo))
  (dashboard-center-content . t)
  (initial-buffer-choice . #'startup%initial-buffer-choice))
#+end_src

** open dashboard at startup :dashboard:startup:asthetic:
:PROPERTIES:
:ID:       1bcc371e-61fa-480e-bdae-4a999d3b10c9
:END:

When I'm using the dashboard.

#+begin_src emacs-lisp
(defun! open-dashboard-instead (&rest _)
  (:around startup%initial-buffer-choice)
  (get-buffer-create "*dashboard*"))
#+end_src

** dashboard-init-info :startup:dashboard:asthetic:
:PROPERTIES:
:ID:       09019b05-a696-4b15-a5f8-b36b23c42e1a
:END:

[[helpvar:xl-init-time][xl-init-time]] is more accurate than dashboard's init time measure. So I use it
instead.

#+begin_src emacs-lisp
(defadvice! show-package-load-time (:before dashboard-insert-startupify-lists)
  (setq dashboard-init-info
        (format "%d packages loaded in %.2f seconds"
                (cond ((featurep 'straight)
		       (hash-table-size straight--profile-cache))
                      ((featurep 'package)
		       (length package-activated-list))
                      (t
		       0))
                (string-to-number (emacs-init-time)))))
#+end_src

* mini-modeline :modeline:
:PROPERTIES:
:ID:       2e18b51f-e9c5-4cd5-857c-a14f0c1aaf1c
:END:

** setup
:PROPERTIES:
:ID:       d9acb47b-089f-4b18-8fdd-94ffefb2ef86
:END:

These variables do stuff with displaying lines and separators to make the
modeline more visible. I do that myself with =window-divider= so I don't need
this.

#+begin_src emacs-lisp
(use-package mini-modeline
  :demand t
  :hook (emacs-startup-hook . mini-modeline-mode)
  :set
  (mini-modeline-enhance-visual . nil)
  (mini-modeline-display-gui-line . nil))
#+end_src

** default face
:PROPERTIES:
:ID:       1aab03cd-83b2-4d3a-bf3b-71f52dc6158d
:END:

If you don't set this, mini-modeline's background color won't
update with the theme. This is probably what the default value of this
variable should be anyway.

#+begin_src emacs-lisp
(use-package mini-modeline
  :set
  (mini-modeline-face-attr . '(:inherit default)))
#+end_src

** left format
:PROPERTIES:
:ID:       a7d11a8b-e792-43e5-9992-10df562e17ea
:END:

#+begin_src emacs-lisp
(defafter! set-modeline-format (mini-modeline)
  (setq mini-modeline-l-format
	'("%e" mode-line-buffer-identification)))
#+end_src

** right format
:PROPERTIES:
:ID:       fd79e9cb-40d7-4320-9b1d-248da4330bca
:END:

#+begin_src emacs-lisp
(defafter! set-the-right-modeline (mini-modeline)
  (setq mini-modeline-r-format
	'("%e"
	  (:eval (awhen (mini-modeline:display-current-workgroup)
		  (concat it " ")))
	  (:eval (format-time-string "%a %m/%d %T")))))
#+end_src

** set the modeline display :workgroup:modeline:
:PROPERTIES:
:ID:       37f062a8-b9d9-4533-ba8e-d675a1d5f10a
:END:

#+begin_src emacs-lisp
(defun! mini-modeline%display-current-workgroup (workgroups2 mini-modeline)
  "Return the name of the current workgroup."
  (when (featurep 'workgroups2) (wg-workgroup-name (wg-current-workgroup))))
#+end_src

** dont redisplay
:PROPERTIES:
:ID:       b3afd056-7b0a-485f-8691-5cc7e4765ca1
:END:

Enabling =mini-modeline-mode= triggers a call to [[helpfn:redisplay][redisplay]]. During startup, this
takes a long time and makes emacs unresponsive for a few seconds. This redisplay
does not seem to be needed (feebleline doesn't do it and it works fine).

#+begin_src emacs-lisp
(defun! dont-redisplay (orig-fn &rest args)
  (:around mini-modeline-mode)
  (cl-letf (((symbol-function #'redisplay) #'ignore))
    (apply orig-fn args)))
#+end_src

* window divider :window:
:PROPERTIES:
:ID:       2cdd6e24-5153-4585-8f1f-206b33445359
:END:

Emacs can add border to windows using a mode called [[helpfn:window-divider-mode][window-divider-mode]].
Often in emacs you have multiple windows displaying different buffers on the
screen. By default the border between these windows is very thin, so it can be
hard to distinguish windows sometimes. The point of adding borders to windows is
to distinguish them easily from one another.

Window dividers are useful in general so I don't get confused about when one
window ends and another begins (see [[helpfn:window-divider-mode][window-divider-mode]]). When using [[I like emacs][exwm]] it
makes emacs feel like a window manager with gaps.

** window divider :window:asthetic:
:PROPERTIES:
:ID:       c3e2fda8-89c8-4f3b-951a-113e936d6206
:END:

#+begin_src emacs-lisp
(use-package window-divider
  :hook (window-setup-hook . window-divider-mode)
  :set
  (window-divider-default-bottom-width . 7)
  (window-divider-default-right-width  . 7)
  (window-divider-default-places       . t))
#+end_src

** window divider face :window:asthetic:
:PROPERTIES:
:ID:       61157149-dcce-40a9-8bfa-76a6af24838a
:END:

#+begin_src emacs-lisp
(defhook! set-window-divider-face (load-theme)
  (set-face-foreground 'window-divider "black"))
#+end_src

** update on theme change :theme:asthetic:window:
:PROPERTIES:
:ID:       ceff91e5-8172-4b26-81de-681c0864bc4b
:END:

#+begin_src emacs-lisp
(defhook! update-window-divider (xl-after-load-theme-hook)
  "Ensure window divider persists after theme change."
  (unless (bound-and-true-p window-divider-mode)
    (window-divider-mode 1)))
#+end_src

** TODO increase gap size :asthetic:window:
:PROPERTIES:
:ID:       867fad5c-b4d4-4cba-929e-0dc23f007c5b
:END:

Somtimes I might want to adjust this.

#+begin_src emacs-lisp
(defun frame/adjust-window-divider-size (amount)
  "Adjust the gap size of window-divider by AMOUNT."
  (cl-incf window-divider-default-bottom-width amount)
  (cl-incf window-divider-default-right-width amount))
#+end_src

** increase :command:asthetic:
:PROPERTIES:
:ID:       ebd6b013-6213-42a1-9e95-fefc7e7da991
:END:

#+begin_src emacs-lisp
(defun frame/increment-window-divider-size ()
  "Increase window divider size."
  (interactive)
  (frame:adjust-window-divider-size 1))
#+end_src

** decrease :command:asthetic:
:PROPERTIES:
:ID:       6b1eb1cd-1cfd-4b82-a413-cb61fa13e0a4
:END:

#+begin_src emacs-lisp
(defun frame/decrement-window-divider-size ()
  "Decrease window divider size."
  (interactive)
  (frame:adjust-window-divider-size -1))
#+end_src

* emojis :asthetic:icon:
:PROPERTIES:
:ID:       d3e15439-f690-4ced-b701-0882fb911a5c
:END:

This is a package that displays emojis! :D A major focus of my config is having
the ability to express myself well--in ways that is simply impossible with mere
documentation. This includes using emojis. Also, using emojis makes
documentation *much* more fun. :joy-cat:

#+begin_src emacs-lisp
(use-package emojify
  :hook org-mode-hook
  ;; :on-install (emojify-in)
  :set
  (emojify-emojis-dir . (concat XL-CACHE-DIR "emojis/")))
#+end_src

